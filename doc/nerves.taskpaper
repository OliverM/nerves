Data structure shorthand for statecharts:
	This allows specification of statecharts using clojure data structures. These will be consumed by a function that will spit out a decorated version that is a fully functional statechart.
	State definition:
		- A map with per-state properties (detailed below).
			Per-state properties:
				- children
					- An array of substates
				- concurrent-children
					- Children should run concurrently, if present & set to true
				- history 
					- active if present; set to one of shallow for current state only or deep for recursive history across all child states
				- name
					- Required. String.
				- actions
					- An array of actions available in this state. Actions are triples of action names, destination state names and zero-argument functions.
					- enter-state and exit-state actions are two reserved action names fired when entering and leaving the state. Destination state names supplied here are ignored if present.
	Statechart definition:
		- An array of states, each of which can have arbitrarily-deep substates

Statechart factory function:
	- When passed a statechart definition, it:
		- Generates an event-action table containing a map keyed by the statechart state variables & fired event, returning a pair of actions to perform and statechart destination state variables
		- Augments each state definition with:
			- An atom for the history functionality if specified by the state definition or a recursive history specification by a parent state, to hold the destination child state when returning to this state (possibly redundant given next atom requirement?)
			- An atom for the current child state if child states are present, or for each child state if the child states are concurrent, to hold the currently active states
			- A state entry action setting the atom for the current state to the correct value (run before the user-specified enter-state action if present in the state definition) - conflicts with statechart destination variables set in event-action table?
